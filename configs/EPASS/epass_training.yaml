data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.efficient_det_dataset
        class: LabelmeDataset
        LabelmeDataset:
          model_name: '''D0'''
          dirnames:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/train/'''
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/test/'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 0
            EPASS_TYPE_3: 0
            EPASS_TYPE_4: 0
            EPASS_TYPE_5: 0
          transforms:
            - iaa.MotionBlur()
            - iaa.ChangeColorTemperature()
            - iaa.GaussianBlur(sigma=(0, 1))
            - iaa.Grayscale(alpha=(0.0, 1.0))
            - iaa.Add(value=(-50, 50), per_channel=True)
            - iaa.Fliplr(p=0.5)
            - iaa.Flipud(p=0.5)
            - iaa.Crop(percent=(0, 0.1))
            - iaa.Pad(percent=(0, 0.1), keep_size=False)
            - iaa.Rot90(k=[0, 1, 2, 3], keep_size=False)
            - iaa.Affine(rotate=(0, 360), shear=(-2, 2), fit_output=True)
      batch_size: 2
      shuffle: True
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'
  
  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.efficient_det_dataset
        class: LabelmeDataset
        LabelmeDataset:
          model_name: '''D0'''
          dirnames:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/train/'''
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/test/'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 0
            EPASS_TYPE_3: 0
            EPASS_TYPE_4: 0
            EPASS_TYPE_5: 0
      batch_size: 2
      shuffle: False
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.efficient_det_dataset
        class: LabelmeDataset
        LabelmeDataset:
          model_name: '''D0'''
          dirnames:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/valid/'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 0
            EPASS_TYPE_3: 0
            EPASS_TYPE_4: 0
            EPASS_TYPE_5: 0
      batch_size: 8
      shuffle: False
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

loss:
  module: core.loss.focal_loss
  class: Loss
  Loss:
    loss_fn: 
      module: core.loss.focal_loss
      class: FocalLoss
      FocalLoss:
        alpha: 0.25
        gamma: 2.0
        lamda: 25.0
        device: '''cuda'''

model:
  module: core.models.efficient_det.efficient_det
  class: Model
  Model:
    num_classes: 1
    model_name: '''D0'''
    backbone_pretrained: False
    scales: ['2 ** 0', '2 ** (1 / 3)', '2 ** (2 / 3)']
    aspect_ratios: [0.25, 0.5, 1., 2., 4.]  # anchor_width / anchor_height

optim:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.1
    amsgrad: True

early_stopping:
  module: core.handlers.early_stopping
  class: EarlyStopping
  EarlyStopping:
    evaluator_name: '''valid'''
    patience: 50
    delta: 0
    mode: '''min'''
    score_name: '''loss'''

writer:
  module: core.handlers.writer
  class: Writer
  Writer:
    save_dir: '''checkpoint/EPASS/'''

logger:
  module: core.handlers.logger
  class: Logger
  Logger:
    save_dir: '''checkpoint/EPASS/'''
    mode: logging.DEBUG
    format: '''%(asctime)s - %(name)s - %(levelname)s - %(message)s'''

plot:
  module: core.handlers.plotter
  class: Plotter
  Plotter:
    save_dir: '''checkpoint/EPASS/'''

lr_scheduler:
  module: core.handlers.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    evaluator_name: '''valid'''
    score_name: '''loss'''
    optim: config['optim']
    mode: '''min'''
    factor: 0.1
    patience: 10
    verbose: True

model_inspection:
  module: core.handlers.model_inspection
  class: ModelInspection
  ModelInspection:
    verbose: True
    input_shape: '(768, 768, 3)'

metric:
  module: core.handlers.evaluator
  class: Metrics
  Metrics:
    metrics:
      loss:
        module: core.metric.loss
        class: Loss
        Loss:
          loss_fn: 
            module: core.loss.focal_loss
            class: FocalLoss
            FocalLoss:
              alpha: 0.25
              gamma: 2.
              lamda: 50.
              device: '''cuda'''
          output_transform: 'lambda x: (x[1], x[2], x[3], x[4])'
      mAP:
        module: core.handlers.evaluator_mAP
        class: EvaluatorMAP
        EvaluatorMAP:
          eval_fn:
            module: core.metric.mAP
            class: MeanAveragePrecision
            MeanAveragePrecision:
              classes:
                EPASS: 0
              iou_threshold: 0.5
              method: '''every_point_interpolation'''
              print_FP_files: False
          output_transform: 'lambda x: (x[0], x[4], x[5])'

predictor:
  module: core.handlers.predictor
  class: RegionPredictor
  RegionPredictor:
    imsize: 768
    classes:
      EPASS: [[0, 0, 255], 0]
    score_threshold: 0.5
    iou_threshold: 0.5
    output_dir: '''checkpoint/EPASS/PREDICTS'''

trainer:
  module: core.engine
  class: Trainer
  Trainer:
    project_name: '''EPASS'''
    model: config['model']
    data: config['data']
    loss: config['loss']
    optim: config['optim']
    metric: config['metric']
    early_stopping: config['early_stopping']
    lr_scheduler: config['lr_scheduler']
    logger: config['logger']
    writer: config['writer']
    plotter: config['plot']
    model_inspection: config['model_inspection']
    save_dir: '''checkpoint/EPASS/'''
    predictor: config['predictor']

extralibs:
  torch: torch
  iaa: imgaug.augmenters
  logging: logging
  torchvision: torchvision
  transforms: torchvision.transforms
