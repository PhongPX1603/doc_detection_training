data:
  test:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: core.data.labelme_dataset
        class: LabelmeDataset
        LabelmeDataset:
          imsize: 768
          dirnames:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/object_detection_pytorch/efficient_det_pytorch/dataset/EPASS/test'''
          image_patterns: ['''*.jpg''', '''*.png''', '''*.jpeg''', '''*.JPG''', '''*.PNG''', '''*.JPEG''']
          label_patterns: ['''*.json''']
          mean: [0.485, 0.456, 0.406]
          std: [0.229, 0.224, 0.225]
          classes:
            EPASS_TYPE_1: 0
            EPASS_TYPE_2: 1
            EPASS_TYPE_3: 2
            EPASS_TYPE_4: 2
            EPASS_TYPE_5: 3
      batch_size: 8
      shuffle: False
      num_workers: 12
      pin_memory: True
      drop_last: False
      collate_fn: 'lambda batch:tuple(zip(*batch))'

model:
  module: core.models.retina_net
  class: Model
  Model:
    num_classes: 4
    backbone_name: '''resnet50'''
    backbone_pretrained: False
    scales: ['2 ** 0', '2 ** (1 / 3)', '2 ** (2 / 3)']
    aspect_ratios: [0.25, 0.5, 1., 2., 4.]  # anchor_width / anchor_height
    iou_threshold: 0.2
    score_threshold: 0.2

metric:
  module: core.handlers.evaluator
  class: Metrics
  Metrics:
    metrics:
      loss:
        module: core.metric.loss
        class: Loss
        Loss:
          loss_fn: 
            module: core.loss.focal_loss
            class: FocalLoss
            FocalLoss:
              alpha: 0.25
              gamma: 2.
              lamda: 50.
              device: '''cuda'''

predictor:
  module: core.handlers.predictor
  class: RegionPredictor
  RegionPredictor:
    imsize: 768
    classes:
      EPASS_TYPE_1: [[0, 0, 255], 0]
      EPASS_TYPE_2: [[0, 255, 0], 1]
      EPASS_TYPE_3_4: [[255, 0, 0], 2]
      EPASS_TYPE_5: [[255, 0, 255], 3]
    score_threshold: 0.5
    iou_threshold: 0.5
    output_dir: '''checkpoint/EPASS/PREDICTS'''

evaluator:
  module: core.engine
  class: Evaluator
  Evaluator:
    data: config['data']['test']
    model: config['model']
    metric: config['metric']
    predictor: config['predictor']

extralibs:
  torch: torch
